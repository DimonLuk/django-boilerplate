"""
This module describes basic terminal commands for simplifying operations with
docker-compose.

ATENTION!!! Some commands requires superuser permissions to work properly (
this is because of cache files generated by postgres and python inside docker are
assigned to root, so in order to remove them you have to be root). Check code if you
don't trust. To allow commands to be executed with root rights please set environmental
variable HELPERS_ALLOW_SUDO to true and enter your password (if you have it). If the
variable is not set to true commands will use current user's rights.

The whole management module is ignored by tests since there're not much things that
can have reasonable tests (and I'm lazy). If you decide to improve this, feel free
to add tests.
"""
import subprocess
import os


class BaseTerminalCommand:
    command = None
    commands_to_run_before = None
    commands_to_run_after = None
    sudo_required = False

    @property
    def command_(self):
        if os.environ.get("HELPERS_ALLOW_SUDO", None) and self.sudo_required:
            return f"sudo {self.command}"
        else:
            return self.command

    def run(self):
        subprocess.run(self.command_, shell=True)

    def start(self):
        self.run_before()
        self.run()
        self.run_after()

    def run_before(self):
        if self.commands_to_run_before:
            for command in self.commands_to_run_before:
                command.start()

    def run_after(self):
        if self.commands_to_run_after:
            for command in self.commands_to_run_after:
                command.start()


class RemovePycacheTerminalCommand(BaseTerminalCommand):
    command = "rm -rf **/__pycache__"
    sudo_required = True


class ClearDatabaseTerminalCommand(BaseTerminalCommand):
    command = "rm -rf __postgres_data__"
    sudo_required = True


class ResetImageStatusTerminalCommand(BaseTerminalCommand):
    command = "rm .image_status"


class CreateImageStatusTerminalCommand(BaseTerminalCommand):
    DEVELOPMENT = "DEVELOPMENT"
    TEST = "TEST"

    def __init__(self, status):
        self.status = status

    def run(self):
        with open(".image_status", "w") as file:
            file.write(self.status)


class StartDatabaseTerminalCommand(BaseTerminalCommand):
    command = "docker-compose up -d database"


class StartTestDatabaseTerminalCommand(BaseTerminalCommand):
    command = "docker-compose -f docker-compose.test.yaml up -d database"


class BuildDockerComposeImagesTerminalCommand(BaseTerminalCommand):
    command = "docker-compose build"
    sudo_required = True
    commands_to_run_before = [RemovePycacheTerminalCommand()]

    def run(self):
        exists = os.path.isfile(".image_status")
        if exists:
            with open(".image_status", "r") as file:
                status = file.read()
            is_build = status == CreateImageStatusTerminalCommand.TEST
        else:
            is_build = not exists

        if is_build:
            subprocess.run(self.command_, shell=True)
        command = CreateImageStatusTerminalCommand(
            CreateImageStatusTerminalCommand.DEVELOPMENT
        )
        command.start()


class BuildDockerComposeTestImagesTerminalCommand(BaseTerminalCommand):
    command = "docker-compose -f docker-compose.test.yaml build"
    sudo_required = True
    commands_to_run_before = [RemovePycacheTerminalCommand()]

    def run(self):
        exists = os.path.isfile(".image_status")
        if exists:
            with open(".image_status", "r") as file:
                status = file.read()
            is_build = status == CreateImageStatusTerminalCommand.DEVELOPMENT
        else:
            is_build = not exists

        if is_build:
            subprocess.run(self.command_, shell=True)
        command = CreateImageStatusTerminalCommand(
            CreateImageStatusTerminalCommand.TEST
        )
        command.start()


class StopServicesTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [RemovePycacheTerminalCommand()]
    command = "docker-compose down"


class LogsTerminalCommand(BaseTerminalCommand):
    command = "docker-compose logs"


class ListTerminalCommand(BaseTerminalCommand):
    command = "docker-compose list"


class RunTestsTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeTestImagesTerminalCommand(),
        StartTestDatabaseTerminalCommand(),
    ]
    command = (
        "docker-compose -f docker-compose.test.yaml up -d"
        " && docker-compose logs -f project"
    )


class RunTestsInShellTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeTestImagesTerminalCommand(),
        StartTestDatabaseTerminalCommand(),
    ]
    command = "docker-compose -f docker-compose.test.yaml run project /bin/bash"


class RunAppTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeImagesTerminalCommand(),
        StartDatabaseTerminalCommand(),
    ]
    command = "docker-compose up -d"


class RunAppInShellTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeImagesTerminalCommand(),
        StartDatabaseTerminalCommand(),
    ]
    command = "docker-compose run -p 8000:80 project /bin/bash"
