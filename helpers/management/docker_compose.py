"""
This module describes basic terminal commands for simplifying operations with
docker-compose.

ATENTION!!! Some commands requires superuser permissions to work properly (
this is because of cache files generated by postgres and python inside docker are
assigned to root, so in order to remove them you have to be root). Check code if you
don't trust. To allow commands to be executed with root rights please set environmental
variable HELPERS_ALLOW_SUDO to true and enter your password (if you have it). If the
variable is not set to true commands will use current user's rights.

The whole management module is ignored by tests since there're not much things that
can have reasonable tests (and I'm lazy). If you decide to improve this, feel free
to add tests.
"""
import subprocess
import os

from .constants import (
    FILE_WITH_IMAGE_STATUS,
    DEVELOPMENT_IMAGE,
    TEST_IMAGE,
    ALLOW_SUDO_USAGE_ENV_VAR,
)


class BaseTerminalCommand:
    command = None
    commands_to_run_before = None
    commands_to_run_after = None
    sudo_required = False

    def start(self):
        self._run_before()
        self._run()
        self._run_after()

    def _run_before(self):
        if self.commands_to_run_before:
            for command in self.commands_to_run_before:
                command.start()

    def _run(self):
        subprocess.run(self.full_command, shell=True)

    def _run_after(self):
        if self.commands_to_run_after:
            for command in self.commands_to_run_after:
                command.start()

    @property
    def full_command(self):
        if os.environ.get(ALLOW_SUDO_USAGE_ENV_VAR, None) and self.sudo_required:
            return f"sudo {self.command}"
        else:
            return self.command


class RemovePycacheTerminalCommand(BaseTerminalCommand):
    command = "rm -rf **/__pycache__"
    sudo_required = True


class ClearDatabaseTerminalCommand(BaseTerminalCommand):
    command = "rm -rf __postgres_data__"
    sudo_required = True


class ResetImageStatusTerminalCommand(BaseTerminalCommand):
    command = f"rm {FILE_WITH_IMAGE_STATUS}"


class CreateImageStatusTerminalCommand(BaseTerminalCommand):
    def __init__(self, status):
        self.status = status

    def _run(self):
        self._write_to_file()

    def _write_to_file(self):
        with open(FILE_WITH_IMAGE_STATUS, "w") as file:
            file.write(self.status)


class StartDatabaseTerminalCommand(BaseTerminalCommand):
    command = "docker-compose up -d database"


class StartTestDatabaseTerminalCommand(BaseTerminalCommand):
    command = "docker-compose -f docker-compose.test.yaml up -d database"


class BaseBuildDockerComposeImagesTerminalCommand(BaseTerminalCommand):
    command = "docker-compose build"
    sudo_required = True
    commands_to_run_before = [RemovePycacheTerminalCommand()]

    def _run(self):
        if self._file_exists:
            status = self._read_from_file()
            to_build = self._need_rebuilding(status)
        else:
            to_build = True
        if to_build:
            subprocess.run(self.full_command, shell=True)

        self._update_status()

    @property
    def _file_exists(self):
        return os.path.isfile(FILE_WITH_IMAGE_STATUS)

    def _read_from_file(self):
        with open(FILE_WITH_IMAGE_STATUS, "r") as file:
            return file.read()

    def _need_rebuilding(self, status):
        raise NotImplementedError

    def _update_status(self):
        raise NotImplementedError


class BuildDockerComposeImagesTerminalCommand(
    BaseBuildDockerComposeImagesTerminalCommand
):
    def _need_rebuilding(self, status):
        return status == TEST_IMAGE

    def _update_status(self):
        CreateImageStatusTerminalCommand(DEVELOPMENT_IMAGE).start()


class BuildDockerComposeTestImagesTerminalCommand(
    BaseBuildDockerComposeImagesTerminalCommand
):
    def _need_rebuilding(self, status):
        return status == DEVELOPMENT_IMAGE

    def _update_status(self):
        CreateImageStatusTerminalCommand(TEST_IMAGE).start()


class StopServicesTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [RemovePycacheTerminalCommand()]
    command = "docker-compose down"


class LogsTerminalCommand(BaseTerminalCommand):
    command = "docker-compose logs"


class ListTerminalCommand(BaseTerminalCommand):
    command = "docker-compose list"


class RunTestsTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeTestImagesTerminalCommand(),
        StartTestDatabaseTerminalCommand(),
    ]
    command = (
        "docker-compose -f docker-compose.test.yaml up -d"
        " && docker-compose logs -f project"
    )


class RunTestsInShellTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeTestImagesTerminalCommand(),
        StartTestDatabaseTerminalCommand(),
    ]
    command = "docker-compose -f docker-compose.test.yaml run project /bin/bash"


class RunAppTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeImagesTerminalCommand(),
        StartDatabaseTerminalCommand(),
    ]
    command = "docker-compose up -d"


class RunAppInShellTerminalCommand(BaseTerminalCommand):
    commands_to_run_before = [
        StopServicesTerminalCommand(),
        BuildDockerComposeImagesTerminalCommand(),
        StartDatabaseTerminalCommand(),
    ]
    command = "docker-compose run -p 8000:80 project /bin/bash"
